group_by(Genre, Year) %>%
summarise(Total = n()) %>%
filter(Genre %in% c("Action", "`Role-Playing`", "Shooter", "Sports", "Adventure")) %>%
ungroup() %>%
ggplot(aes(x = Year, y = Total, colour = Genre)) +
geom_point(size = 2) +
geom_line(size= 1) +
scale_color_manual(
values = c(
Action = "#E41A1C",
Adventure = "#75597F",
`Role-Playing` = "#FFB917",
Shooter = "#B9EF31",
Sports = "#C3655E"
)
) +
xlim(1980, 2016) +
theme_minimal()
games_data %>%
filter(!(Year %in% c("2020", "2017"))) %>%
ggplot() +
aes(x =as.factor(Year), y = Global_Sales) +
geom_boxplot(fill = "#FFFFFF") +
scale_y_continuous(trans = "log10") +
xlab(element_blank()) +
ylab(element_blank())
games_data %>%
head(20) %>%
ggplot(aes(x=reorder(Name,-Global_Sales), y= Global_Sales, fill=Genre)) +
geom_col() +
scale_fill_manual(
values = c(
Action = "#1B9E77",
Adventure = "#93752C",
Fighting = "#BD6332",
Misc = "#7E6EA2",
Platform = "#B3499C",
Puzzle = "#CF3F76",
Racing = "#7D8F31",
`Role-Playing` = "#A0A811",
Shooter = "#E0A604",
Simulation = "#B78415",
Sports = "#8E7037",
Strategy = "#666666"
)
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
games_data %>%
group_by(Year) %>%
arrange(desc(Global_Sales)) %>%
slice(1) %>%
ggplot(aes(y =reorder(Year, -Year), x= Global_Sales, fill = Genre)) +
geom_text(aes(label=Name), position=position_dodge(width=0.9), hjust=-0.05) +
geom_col() +
scale_fill_manual(
values = c(
Action = "#1B9E77",
Adventure = "#93752C",
Fighting = "#BD6332",
Misc = "#7E6EA2",
Platform = "#B3499C",
Puzzle = "#CF3F76",
Racing = "#7D8F31",
`Role-Playing` = "#A0A811",
Shooter = "#E0A604",
Simulation = "#B78415",
Sports = "#8E7037",
Strategy = "#666666"
)
) +
theme_minimal()
games_data %>%
filter(Platform %in% c("Wii", "NES", "GB", "DS", "SNES", "3DS", "N64", "GC", "WiiU", "3DO")) %>%
ggplot(aes(x = Platform, fill = Genre)) +
geom_bar(position = "dodge") +
scale_fill_manual(
values = c(
Action = "#1B9E77",
Adventure = "#93752C",
Fighting = "#BD6332",
Misc = "#7E6EA2",
Platform = "#B3499C",
Puzzle = "#CF3F76",
Racing = "#7D8F31",
`Role-Playing` = "#A0A811",
Shooter = "#E0A604",
Simulation = "#B78415",
Sports = "#8E7037",
Strategy = "#666666"
)
) +
labs(
x = "Platform",
y = "Number of Games",
title = "Nintendo Gaming",
subtitle = "Comparing Different Nintendo platforms",
fill = "Genre"
) +
theme_minimal() +
theme(plot.title = element_text(size = 18L,
face = "bold")) +
facet_wrap(vars(Genre), scales = "free")
games_data   %>%
filter(Platform %in% "PC") %>%
ggplot() +
aes(
x = Year,
y = Global_Sales,
colour = Genre,
group = Global_Sales
) +
geom_jitter(size = 2.5) +
scale_color_manual(
values = c(
Action = "#7FC97F",
Adventure = "#A7B7B5",
Fighting = "#CFB2BE",
Misc = "#F7BE8D",
Platform = "#FEE290",
Puzzle = "#DAE49D",
Racing = "#5C86AB",
`Role-Playing` = "#8B3B99",
Shooter = "#EB0A75",
Simulation = "#CC4233",
Sports = "#9E5F33",
Strategy = "#666666"
)
) +
labs(y = "Global Sales",
title = "PC Gaming Evolution",
subtitle = "Global Sales through the years") +
theme_minimal() +
theme(
plot.title = element_text(size = 20L,
face = "bold"),
plot.subtitle = element_text(size = 14L, face = "italic")
)
esquisse:::esquisser()
esquisse:::esquisser()
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year)
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile()
platform_data <- games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year)
esquisse:::esquisser()
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile()
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient(low='lightblue',high='red',breaks=c(50,150,250,350,450),
labels=c('Minimum',150,250,350,'Maximum'))
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient(low='lightblue',high='red',breaks=c(50,150,250,350,450))
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient2(
low = "grey",
mid = "white",
high = "brown"
,breaks=c(50,150,250,350,450))
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient2(
low = "green",
mid = "white",
high = "brown"
,breaks=c(50,150,250,350,450))
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient2(
low = "darkgreen",
mid = "white",
high = "brown"
,breaks=c(50,150,250,350,450))
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient2(
low = "darkgreen",
mid = "white",
high = "brown"
)
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient2(low = "darkgreen", mid = "white", high = "brown")
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient2(low = "darkgreen", mid = "white", high = "darkred")
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile()
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient2(low = "darkgreen", mid = "white", high = "darkred")
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient2(low = "darkgreen", mid = "white", high = "darkred", midpoint = "200")
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient2(low = "darkgreen", mid = "white", high = "darkred", midpoint = 200)
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient2(low = "darkgreen", mid = "white", high = "darkred", midpoint = 300)
games_data %>%
group_by(Year, Platform) %>%
summarise(Total_Games = n()) %>%
arrange(Year) %>%
ggplot(aes(x = Year, y=Platform, fill = Total_Games)) +
geom_tile() +
scale_fill_gradient2(low = "darkgreen", mid = "white", high = "darkred", midpoint = 300) +
theme_minimal()
games_data %>%
group_by(Publisher) %>%
summarise(Total_Games = sum())
games_data %>%
group_by(Publisher) %>%
summarise(Total_Games = sum()) %>%
arrange(desc(Total_Games))
games_data %>%
group_by(Publisher) %>%
summarise(Total_Games = n()) %>%
arrange(desc(Total_Games))
games_data %>%
group_by(Publisher) %>%
summarise(Total_Games = n()) %>%
arrange(desc(Total_Games)) %>%
head(10)
games_data %>%
group_by(Publisher) %>%
summarise(Total_Games = n()) %>%
arrange(desc(Total_Games)) %>%
head(10) %>%
ggplot(aes(x = Publisher, y= Total_Games)) +
geom_col()
games_data %>%
group_by(Publisher) %>%
summarise(Total_Games = n()) %>%
arrange(desc(Total_Games)) %>%
head(10) %>%
ggplot(aes(x = Publisher, y= Total_Games, fill = Publisher)) +
geom_col()
publisher <- games_data %>%
group_by(Publisher) %>%
summarise(Total_Games = n()) %>%
arrange(desc(Total_Games)) %>%
head(10)
esquisse:::esquisser()
ggplot(publisher, aes(x = Publisher, fill = Publisher, y = Total_Games)) +
geom_bar() +
scale_fill_manual(
values = c(Activision = "#E41A1C",
`Electronic Arts` = "#5D6795",
`Konami Digital Entertainment` = "#43997A",
`Namco Bandai Games` = "#658E67",
Nintendo = "#A35390",
Sega = "#F37912",
`Sony Computer Entertainment` = "#FFD422",
`Take-Two Interactive` = "#D7B32E",
THQ = "#B85F49",
Ubisoft = "#F781BF")
) +
labs(y = "Number of Games") +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
ggplot(publisher, aes(x = Publisher, fill = Publisher, y = Total_Games)) +
geom_col() +
scale_fill_manual(
values = c(Activision = "#E41A1C",
`Electronic Arts` = "#5D6795",
`Konami Digital Entertainment` = "#43997A",
`Namco Bandai Games` = "#658E67",
Nintendo = "#A35390",
Sega = "#F37912",
`Sony Computer Entertainment` = "#FFD422",
`Take-Two Interactive` = "#D7B32E",
THQ = "#B85F49",
Ubisoft = "#F781BF")
) +
labs(y = "Number of Games") +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
ggplot(publisher, aes(x = reorder(Publisher, -Total_Games), fill = Publisher, y = Total_Games)) +
geom_col() +
scale_fill_manual(
values = c(Activision = "#E41A1C",
`Electronic Arts` = "#5D6795",
`Konami Digital Entertainment` = "#43997A",
`Namco Bandai Games` = "#658E67",
Nintendo = "#A35390",
Sega = "#F37912",
`Sony Computer Entertainment` = "#FFD422",
`Take-Two Interactive` = "#D7B32E",
THQ = "#B85F49",
Ubisoft = "#F781BF")
) +
labs(y = "Number of Games") +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
ggplot(publisher, aes(x = reorder(Publisher, Total_Games), fill = Publisher, y = Total_Games)) +
geom_col() +
scale_fill_manual(
values = c(Activision = "#E41A1C",
`Electronic Arts` = "#5D6795",
`Konami Digital Entertainment` = "#43997A",
`Namco Bandai Games` = "#658E67",
Nintendo = "#A35390",
Sega = "#F37912",
`Sony Computer Entertainment` = "#FFD422",
`Take-Two Interactive` = "#D7B32E",
THQ = "#B85F49",
Ubisoft = "#F781BF")
) +
labs(y = "Number of Games") +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
ggplot(publisher, aes(x = reorder(Publisher, Total_Games), fill = Publisher, y = Total_Games)) +
geom_col() +
scale_fill_manual(
values = c(Activision = "#E41A1C",
`Electronic Arts` = "#5D6795",
`Konami Digital Entertainment` = "#43997A",
`Namco Bandai Games` = "#658E67",
Nintendo = "#A35390",
Sega = "#F37912",
`Sony Computer Entertainment` = "#FFD422",
`Take-Two Interactive` = "#D7B32E",
THQ = "#B85F49",
Ubisoft = "#F781BF")
) +
labs(y = "Number of Games",
x = "Publisher") +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
num_Sales=game[,c("NA_Sales","EU_Sales","JP_Sales","Other_Sales","Global_Sales")]
num_Sales=games_data[,c("NA_Sales","EU_Sales","JP_Sales","Other_Sales","Global_Sales")]
cor(num_Sales)
View(num_Sales)
install.packages("ggcorrplot")
ggcorrplot::ggcorrplot(correlation)
ggcorrplot::ggcorrplot(correlation)
ggcorrplot::ggcorrplot()
ggcorrplot::ggcorrplot(correlation)
num_Sales=games_data[,c("NA_Sales","EU_Sales","JP_Sales","Other_Sales","Global_Sales")]
correlation <- cor(num_Sales)
num_Sales=games_data[,c("NA_Sales","EU_Sales","JP_Sales","Other_Sales","Global_Sales")]
correlation <- cor(num_Sales)
ggcorrplot::ggcorrplot(correlation)
ggcorrplot::ggcorrplot(correlation)
ggcorrplot::ggcorrplot(correlation, hc.order = TRUE, outline.col = "white")
ggcorrplot::ggcorrplot(correlation, hc.order = TRUE, outline.col = "white",
type = "lower")
ggcorrplot::ggcorrplot(correlation, hc.order = TRUE, outline.col = "white",
type = "lower",
colors = c("#6D9EC1", "white", "#E46726"))
ggcorrplot::ggcorrplot(correlation, hc.order = TRUE, outline.col = "white",
type = "lower",
colors = c("#6D9EC1", "white", "#E46726"))
ggcorrplot::ggcorrplot(correlation, hc.order = TRUE, outline.col = "white",
type = "lower",
colors = c("#6D9EC1", "white", "#E46726"),
lab = TRUE)
ggcorrplot::ggcorrplot(correlation, hc.order = TRUE, outline.col = "white",
type = "lower",
colors = c("#6D9EC1", "white", "#E46726"),
lab = TRUE,
ggtheme = theme_minimal())
num_Sales=games_data[,c("NA_Sales","EU_Sales","JP_Sales","Other_Sales","Global_Sales")]
correlation <- cor(num_Sales)
ggcorrplot::ggcorrplot(correlation, hc.order = TRUE, outline.col = "white",
type = "lower",
colors = c("#6D9EC1", "white", "#E46726"),
lab = TRUE,
ggtheme = theme_minimal())
setwd("~/Google Drive/Code/100_days_of_Code/Day_60")
enter_number = as.integer(readline(prompt = "Enter a Number to check if it passes the
Luhn Algorithm test: "))
enter_number = as.integer(readline(prompt = "Enter a Number to check if it passes the Luhn Algorithm test: "))
function(input)
enter_number <-  (readline(prompt = "Enter a Number to check if it passes the Luhn Algorithm test: ")
split_string <- stringr::str_split(enter_number)
enter_number <-  (readline(prompt = "Enter a Number to check if it passes the Luhn Algorithm test: "))
split_string <- stringr::str_split(enter_number)
enter_number <-  (readline(prompt = "Enter a Number to check if it passes the Luhn Algorithm test: "))
no_spaces <- stringr::str_replace_all(enter_number, " ","")
nospaces
no_spaces
enter_number <-  (readline(prompt = "Enter a Number to check if it passes the Luhn Algorithm test: "))
as_digits <- as.integer(stringr::str_replace_all(enter_number, " ","")[[1]])
as_digits <- as.integer(stringr::str_split(stringr::str_replace_all(enter_number, " ",""))[[1]])
as_digits <- as.integer(stringr::str_split(stringr::str_replace_all(enter_number, " ",""), "")[[1]])
enter_number <-  (readline(prompt = "Enter a Number to check if it passes the Luhn Algorithm test: "))
remove_spaces <- stringr::str_replace_all(enter_number," ", "")
as_digits <- as.integer(stringr::str_split(remove_spaces,"")[[1]])
as_digits
# Convert into a list od digits
digits <- as.integer(stringr::str_split(remove_spaces,"")[[1]])
digits
if (length(digits) < 2 || anyNA(digits)) {
FALSE
} else {
doublers <- rev(rep(c(FALSE, TRUE), length.out = length(digits)))
digits[doublers] <- 2  * digits[doublers]
digits[digits > 9] <- digits[digits > 9] - 9
sum(digits) %% 10 == 0
}
# If length of digits is false, or doesnt contain digits, then return f
if (length(digits) < 2 || anyNA(digits)) {
FALSE
}
else {
doublers <- rev(rep(c(FALSE, TRUE), length.out = length(digits)))
digits[doublers] <- 2  * digits[doublers]
digits[digits > 9] <- digits[digits > 9] - 9
sum(digits) %% 10 == 0
}
# If length of digits is false, or doesnt contain digits, then return f
if (length(digits) < 2 || anyNA(digits)) {
FALSE
} else {
doublers <- rev(rep(c(FALSE, TRUE), length.out = length(digits)))
digits[doublers] <- 2  * digits[doublers]
digits[digits > 9] <- digits[digits > 9] - 9
sum(digits) %% 10 == 0
}
# Ask for an input
enter_number <-  (readline(prompt = "Enter a Number to check if it passes the Luhn Algorithm test: "))
# Remove spaces from the input
remove_spaces <- stringr::str_replace_all(enter_number," ", "")
# Convert into a list of digits
digits <- as.integer(stringr::str_split(remove_spaces,"")[[1]])
# If length of digits is false, or doesnt contain digits, then return f
if (length(digits) < 2 || anyNA(digits)) {
FALSE
} else {
doublers <- rev(rep(c(FALSE, TRUE), length.out = length(digits)))
digits[doublers] <- 2  * digits[doublers]
digits[digits > 9] <- digits[digits > 9] - 9
sum(digits) %% 10 == 0
}
digits
rstudioapi::addTheme('https://raw.githubusercontent.com/johnnybarrels/rstudio-one-dark-pro-theme/master/OneDarkPro.rstheme', apply=TRUE, force=TRUE)
install.packages(c("blob", "bookdown", "broom", "extrafont", "formatR", "haven", "lme4", "magrittr", "phosphoricons", "RColorBrewer", "RcppEigen", "rprojroot", "scales", "skimr", "vctrs", "zoo"))
